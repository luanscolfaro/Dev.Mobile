// Luan Scolfaro P.4
//Atividade 01

package main

import model.Product

fun main() {
    val products = createProducts()

    while (true) {
        println("\nEscolha uma opção:")
        println("1 - Listar todos os produtos")
        println("2 - Listar produtos por categoria")
        println("3 - Listar produtos em promoção")
        println("4 - Listar produtos em promoção por categoria")
        println("5 - Sair")

        when (readLine()?.toIntOrNull()) {
            1 -> printProducts(products)
            2 -> {
                println("Digite a categoria:")
                val category = readLine().orEmpty()
                printProductByCategory(category, products)
            }
            3 -> printPromoProducts(products)
            4 -> {
                println("Digite a categoria para produtos em promoção:")
                val category = readLine().orEmpty()
                printPromoProductsByCategory(category, products)
            }
            5 -> {
                println("Saindo...")
                break
            }
            else -> println("Opção inválida. Tente novamente.")
        }
    }
}

fun createProducts(): List<Product> {
    return listOf(
        Product(1, "Xbox", 2000f, "Games", 10f),
        Product(2, "Playstation 5", 10000f, "Games", 50f),
        Product(3, "Switch", 1700f, "Games", 0.0f),
        Product(4, "Notebook", 4500f, "Informática", 15f),
        Product(5, "Kindle", 400f, "Livros",0.0f)
    )
}

fun printProducts(products: List<Product>) {
    products.forEach { p ->
        println(p)
    }
}

fun printProductByCategory(category: String, products: List<Product>) {
    val filteredProducts = products.filter { it.category.equals(category, ignoreCase = true) }
    if (filteredProducts.isNotEmpty()) {
        filteredProducts.forEach { println(it) }
    } else {
        println("Nenhum produto encontrado para a categoria: $category")
    }
}

fun printPromoProducts(products: List<Product>) {
    val promoProducts = products.filter { it.discount > 0.0f }
    if (promoProducts.isNotEmpty()) {
        promoProducts.forEach { println(it) }
    } else {
        println("Nenhum produto em promoção.")
    }
}

fun printPromoProductsByCategory(category: String, products: List<Product>) {
    val promoProducts = products.filter { it.discount > 0.0f && it.category.equals(category, ignoreCase = true) }
    if (promoProducts.isNotEmpty()) {
        promoProducts.forEach { println(it) }
    } else {
        println("Nenhum produto em promoção para a categoria: $category")
    }
}


package model

data class Product(
    val id: Int,
    val description: String,
    val price: Float = 0.0f,
    val category: String,
    val discount: Float = 0.0f
) {
    override fun toString(): String {
        val finalPrice = if (discount > 0.0f) price - (price * discount / 100) else price
        val promoLabel = if (discount > 0.0f) " (PROMOÇÃO)" else ""
        return "Id: $id - $description$promoLabel - R$ $finalPrice - $category"
    }
}

